buildscript {
    repositories {
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies { classpath 'com.blackducksoftware.integration:common-gradle-plugin:0.0.+' }
}

configurations {
    jaxws.extendsFrom api
}

project.ext.moduleName = 'com.synopsys.integration.coverity-common-api'
project.ext.javaUseAutoModuleName = 'true'

group = 'com.synopsys.integration'
version = '2019.6.0-SNAPSHOT'
description = 'A library of generated request/response classes for the Coverity SOAP API, plus manually created response classes for the Coverity REST API.'

apply plugin: 'com.blackducksoftware.integration.library'

nexusStaging { packageGroup = 'com.synopsys' }

dependencies {
    jaxws 'com.sun.xml.ws:jaxws-tools:2.1.4'

    // Required for Java 11
    api 'javax.xml.bind:jaxb-api:2.3.0'
    api 'javax.xml.ws:jaxws-api:2.3.0'
    api 'javax.jws:jsr181-api:1.0-MR1'
    api 'javax.activation:activation:1.1'
    api 'com.sun.xml.bind:jaxb-impl:2.3.0'
    api 'com.sun.xml.bind:jaxb-core:2.3.0'
    api 'com.sun.xml.ws:rt:2.3.0'
    api 'com.sun.xml.ws:jaxws-rt:2.3.0'
    api 'com.sun.xml.ws:jaxws-ri:2.3.2'
    api 'com.sun.xml.xws:xws-security:3.0'
}

task wsimport {
    def generationPath = project.sourceSets.main.java.srcDirs.first()
    ext.destDir = file(generationPath)

    doLast {
        if (project.hasProperty('coverityServerUrl')) {
            def wspackage = 'com.synopsys.integration.coverity.api.ws'
            String configurationServiceWsdlUrl = "$coverityServerUrl/ws/v9/configurationservice?wsdl"
            String defectServiceWsdlUrl = "$coverityServerUrl/ws/v9/defectservice?wsdl"

            ant {
                sourceSets.main.output.classesDirs.inits()
                destDir.mkdirs()
                taskdef(name: 'wsimport',
                        classname: 'com.sun.tools.ws.ant.WsImport',
                        classpath: configurations.jaxws.asPath)
                wsimport(keep: true,
                        sourcedestdir: generationPath,
                        package: "${wspackage}.defect",
                        wsdl: configurationServiceWsdlUrl) {
                    xjcarg(value: "-XautoNameResolution")
                }
                wsimport(keep: true,
                        sourcedestdir: generationPath,
                        package: "${wspackage}.configuration",
                        wsdl: defectServiceWsdlUrl) {
                    xjcarg(value: "-XautoNameResolution")
                }
            }
        } else {
            logger.warn('coverityServerUrl not specified, will not wsimport the request and response classes')
        }
    }
}

compileJava {
    dependsOn wsimport
}
